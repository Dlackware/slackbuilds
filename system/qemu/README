QEMU is a generic and open source machine emulator and virtualizer.

When used as a machine emulator, QEMU can run OSes and programs made for 
one machine (e.g. an ARM board) on a different machine (e.g. your own PC). 
By using dynamic translation, it achieves very good performances.

qemu-kvm is a generic and open source virtualizer.
qemu-kvm achieves near native performances by leveraging the kvm-kmod
modules and executing the guest code directly on the host CPU.
Slackware provides pre-built 32/64 bit x86 kvm-kmod modules or you can
build different versions with the kvm-kmod package.
By default this package builds also qemu-kvm, if you need to disable
building it, pass the script the variable KVM=no, like this:
  KVM=no sh qemu.SlackBuild
If you instead like to build only the accelerated qemu-kvm for x86_64
arch guests (both 32 and 64 bits), pass it KVM=only.

The qemu SlackBuild patches the installed udev rules so that you
no longer are required to use the system group 'kvm' as the default.
The 'users' group is set as the default in this SlackBuild.
If you want to use a different group, then run the SlackBuild like this:
  KVMGROUP=group sh qemu.SlackBuild

Don't forget to load the 'kvm-intel' or 'kvm-amd' module (depending on 
your processor) prior to running 'qemu-kvm'.

If you want to enable spice remote desktop support you need spice, then
you can pass the script the variable SPICE=yes.

NOTE:
qemu builds man-pages at compile-time; to do so, /sbin must be in the
current $PATH.  Be sure to run the script as root ( "su -" ).

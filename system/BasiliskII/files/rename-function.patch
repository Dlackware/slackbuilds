--- BasiliskII-20120218/src/Unix/sys_unix.cpp.orig	2012-02-24 13:36:43.925000312 +0100
+++ BasiliskII-20120218/src/Unix/sys_unix.cpp	2012-02-24 13:49:30.279020392 +0100
@@ -70,7 +70,7 @@
 #include "debug.h"
 
 // File handles are pointers to these structures
-struct file_handle {
+struct file_handlez {
 	char *name;	        // Copy of device/file name
 	int fd;
 
@@ -106,17 +106,17 @@
 
 // Open file handles
 struct open_file_handle {
-	file_handle *fh;
+	file_handlez *fh;
 	open_file_handle *next;
 };
 static open_file_handle *open_file_handles = NULL;
 
 // File handle of first floppy drive (for SysMountFirstFloppy())
-static file_handle *first_floppy = NULL;
+static file_handlez *first_floppy = NULL;
 
 // Prototypes
-static void cdrom_close(file_handle *fh);
-static bool cdrom_open(file_handle *fh, const char *path = NULL);
+static void cdrom_close(file_handlez *fh);
+static bool cdrom_open(file_handlez *fh, const char *path = NULL);
 
 
 /*
@@ -149,7 +149,7 @@
  *  Manage open file handles
  */
 
-static void sys_add_file_handle(file_handle *fh)
+static void sys_add_file_handle(file_handlez *fh)
 {
 	open_file_handle *p = new open_file_handle;
 	p->fh = fh;
@@ -157,7 +157,7 @@
 	open_file_handles = p;
 }
 
-static void sys_remove_file_handle(file_handle *fh)
+static void sys_remove_file_handle(file_handlez *fh)
 {
 	open_file_handle *p = open_file_handles;
 	open_file_handle *q = NULL;
@@ -205,7 +205,7 @@
 	}
 
 	for (open_file_handle *p = open_file_handles; p != NULL; p = p->next) {
-		file_handle * const fh = p->fh;
+		file_handlez * const fh = p->fh;
 
 		// Re-open CD-ROM device
 		if (fh->is_cdrom && type == MEDIA_CD) {
@@ -229,7 +229,7 @@
 		return;
 
 	for (open_file_handle *p = open_file_handles; p != NULL; p = p->next) {
-		file_handle * const fh = p->fh;
+		file_handlez * const fh = p->fh;
 
 		// Mark media as not available
 		if (!fh->is_cdrom || !fh->is_media_present)
@@ -416,7 +416,7 @@
  *  Open CD-ROM device and initialize internal data
  */
 
-static bool cdrom_open_1(file_handle *fh)
+static bool cdrom_open_1(file_handlez *fh)
 {
 #if defined __MACOSX__
 	// In OS X, the device name is OK for sending ioctls to,
@@ -441,7 +441,7 @@
 	return true;
 }
 
-bool cdrom_open(file_handle *fh, const char *path)
+bool cdrom_open(file_handlez *fh, const char *path)
 {
 	if (path)
 		fh->name = strdup(path);
@@ -457,7 +457,7 @@
  *  Close a CD-ROM device
  */
 
-void cdrom_close(file_handle *fh)
+void cdrom_close(file_handlez *fh)
 {
 
 	if (fh->fd >= 0) {
@@ -519,10 +519,10 @@
  *  Open file/device, create new file handle (returns NULL on error)
  */
  
-static file_handle *open_filehandle(const char *name)
+static file_handlez *open_filehandle(const char *name)
 {
-		file_handle *fh = new file_handle;
-		memset(fh, 0, sizeof(file_handle));
+		file_handlez *fh = new file_handlez;
+		memset(fh, 0, sizeof(file_handlez));
 		fh->name = strdup(name);
 		fh->fd = -1;
 #if defined __MACOSX__
@@ -588,7 +588,7 @@
 #if defined(BINCUE)
 	void *binfd = open_bincue(name);
 	if (binfd) {
-		file_handle *fh = open_filehandle(name);
+		file_handlez *fh = open_filehandle(name);
 		D(bug("opening %s as bincue\n", name));
 		fh->bincue_fd = binfd;
 		fh->is_bincue = true;
@@ -604,7 +604,7 @@
 	int vhdsize;
 	void *vhdfd = vhd_unix_open(name, &vhdsize, read_only);
 	if (vhdfd) {
-		file_handle *fh = open_filehandle(name);
+		file_handlez *fh = open_filehandle(name);
 		D(bug("opening %s as vnd\n", name));
 		fh->is_vhd = true;
 		fh->vhd_fd = vhdfd; 
@@ -627,7 +627,7 @@
 		fd = open(name, O_RDONLY);
 	}
 	if (fd >= 0 || is_polled_media) {
-		file_handle *fh = open_filehandle(name);
+		file_handlez *fh = open_filehandle(name);
 		fh->fd = fd;
 		fh->is_file = is_file;
 		fh->read_only = read_only;
@@ -696,7 +696,7 @@
 
 void Sys_close(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return;
 
@@ -729,7 +729,7 @@
 
 size_t Sys_read(void *arg, void *buffer, loff_t offset, size_t length)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return 0;
 
@@ -759,7 +759,7 @@
 
 size_t Sys_write(void *arg, void *buffer, loff_t offset, size_t length)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return 0;
 
@@ -783,7 +783,7 @@
 
 loff_t SysGetFileSize(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return true;
 
@@ -829,7 +829,7 @@
 
 void SysEject(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return;
 
@@ -887,7 +887,7 @@
 
 bool SysFormat(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -902,7 +902,7 @@
 
 bool SysIsReadOnly(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return true;
 
@@ -926,7 +926,7 @@
 
 bool SysIsFixedDisk(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return true;
 
@@ -950,7 +950,7 @@
 
 bool SysIsDiskInserted(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1014,7 +1014,7 @@
 
 void SysPreventRemoval(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return;
 
@@ -1031,7 +1031,7 @@
 
 void SysAllowRemoval(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return;
 
@@ -1048,7 +1048,7 @@
 
 bool SysCDReadTOC(void *arg, uint8 *toc)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1195,7 +1195,7 @@
 
 bool SysCDGetPosition(void *arg, uint8 *pos)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1265,7 +1265,7 @@
 
 bool SysCDPlay(void *arg, uint8 start_m, uint8 start_s, uint8 start_f, uint8 end_m, uint8 end_s, uint8 end_f)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1307,7 +1307,7 @@
 
 bool SysCDPause(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1335,7 +1335,7 @@
 
 bool SysCDResume(void *arg)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1364,7 +1364,7 @@
 
 bool SysCDStop(void *arg, uint8 lead_out_m, uint8 lead_out_s, uint8 lead_out_f)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1393,7 +1393,7 @@
 
 bool SysCDScan(void *arg, uint8 start_m, uint8 start_s, uint8 start_f, bool reverse)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return false;
 
@@ -1408,7 +1408,7 @@
 
 void SysCDSetVolume(void *arg, uint8 left, uint8 right)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return;
 
@@ -1434,7 +1434,7 @@
 
 void SysCDGetVolume(void *arg, uint8 &left, uint8 &right)
 {
-	file_handle *fh = (file_handle *)arg;
+	file_handlez *fh = (file_handlez *)arg;
 	if (!fh)
 		return;
 
